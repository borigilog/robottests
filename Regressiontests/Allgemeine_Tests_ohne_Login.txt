*** Settings ***
Resource          General_Variables/Pathes.txt
Resource          General_Variables/Website_Config.txt
Resource          General_Variables/Database_Config.txt
Library           Selenium2Library
Library           DatabaseLibrary
Library           Collections
Library           ${LIBS_PATH}/DatabaseClass.py    database=${DATABASE_NAME}    user=${DATABASE_USER}    password=${DATABASE_PWD}    host=${DATABASE_IP}    port=${DATABASE_PORT}
Library           XML
Library           ${LIBS_PATH}/SQLQueryReader.py
Library           ${LIBS_PATH}/SettingsDicReader.py

*** Test Cases ***
Connect To Database
    [Documentation]    pip install -U robotframework-databaselibrary
    ...    https://franz-see.github.io/Robotframework-Database-Library/api/0.5/DatabaseLibrary.html
    ...    pip install pymssql
    ...    http://www.pymssql.org/en/stable/
    Open Browser    ${RLX_LOGIN_URL}    ${BROWSER}
    #DatabaseLibrary
    Connect To Database Using Custom Params    pymssql    database='${DATABASE_NAME}', user='${DATABASE_USER}', password='${DATABASE_PWD}', host='${DATABASE_IP}', port='${DATABASE_PORT}'
    Check If Exists In Database    select * from Concerns where Concerns.ConcernID = '75d28447-b0b7-4196-9c40-6417e614f836'
    @{queryConcernResults1}=    Query    select ConcernID, IsDeleted, DateOfCreation from Concerns
    Log To Console    Result1:@{queryConcernResults1}
    Disconnect From Database
    #DatabaseClass with pymssql
    @{queryConcernResults2}=    DatabaseClass.DB Execute Querry    select * from Concerns where Concerns.ConcernID = '75d28447-b0b7-4196-9c40-6417e614f836'
    Log To Console    Result2:@{queryConcernResults2}
    ${queryConcernResults3}=    DatabaseClass.DB Execute Scalar    select Count(*) from Concerns where Concerns.ConcernID = '75d28447-b0b7-4196-9c40-6417e614f836'
    Log To Console    Result3:${queryConcernResults3}
    [Teardown]    Close Browser

XML File Read Querry from SQLQueries.resx with Library XML
    [Documentation]    Library XML is bad with Selenium2Library => same keywords exist
    ${xml} =    Parse XML    ${SQL_QUERIES_PATH}/BILL/SQLQueries.resx
    ${text} =    Get Element Text    ${xml}    data[@name="Retrieve_OpenBills"]/value
    Log To Console    text:${text}

XML File Read Dictionary from Settings_Dic.xml with Library XML
    ${xml} =    Parse XML    ${SETTINGS_PATH}/Bill/Settings_dic.xml
    ${entry}    Get Element    ${xml}    DictionaryContent/Region[@Name="General"]/DicItem[@ID="Confirm"]/I[@L="DE"]
    ${dic_Content}    XML.Get Element Attribute    ${entry}    C
    Log To Console    dic_Content:${dic_Content}

XML File Read Querry from SQLQueries.resx with Class SQLQueryReader
    ${text} =    SQLQueryReader.Get Query By Name    ${SQL_QUERIES_PATH}/BILL/SQLQueries.resx    Retrieve_OpenBills
    Log To Console    text:${text}

XML File Read Dictionary from Settings_Dic.xml with Class SettingsDicReader
    ${text} =    SettingsDicReader.Get Dic Text    ${SETTINGS_PATH}/BILL/Settings_dic.xml    General    Confirm    E
    Log To Console    text:${text}

Create dynamic variable
    Create SettingsDics Test    General    Confirm
    ${value}=    Get From Dictionary    ${General_Confirm}    D
    Log To Console    Global Dic Text:${value}
    ${length} =    Get Length    ${General_Confirm}
    Log To Console    length:${length}
    Create SettingsDics Test    General    Confirm

*** Keywords ***
Create SettingsDics Test
    [Arguments]    ${region_name}    ${dic_id}
    ${var_name}=    Set Variable    ${region_name}_${dic_id}
    ${status}    ${message} =    Run Keyword And Ignore Error    Variable Should Exist    &{${var_name}}
    #Run Keyword And Continue On Failure    Variable Should Exist    &{${var_name}}
    ${passed}=    Run Keyword And Return Status    Variable Should Exist    &{${var_name}}
    Run Keyword If    '${status}' == 'PASS'    Log    Die Variable ${var_name} - &{${var_name}} existiert bereits!    INFO
    Return From Keyword If    '${status}' == 'PASS'
    &{python_dict} =    SettingsDicReader.Get Dictionary    ${SETTINGS_PATH}/BILL/Settings_dic.xml    ${region_name}    ${dic_id}
    Set Global Variable    &{${var_name}}    &{python_dict}
    Log To Console    DIC:&{${var_name}}

Create SettingsDics Test2
    [Arguments]    ${region_name}    ${dic_id}
    ${var_name}=    Set Variable    ${region_name}_${dic_id}
    ${status}    ${message} =    Run Keyword And Ignore Error    Variable Should Exist    &{${var_name}}
    Run Keyword If    '${status}' == 'PASS'    Log    Die Variable ${var_name} - &{${var_name}} existiert bereits!    INFO
    Return From Keyword If    '${status}' == 'PASS'
    ${python_dict} =    SettingsDicReader.Get Dictionary    ${SETTINGS_PATH}/BILL/Settings_dic.xml    ${region_name}    ${dic_id}
    Log To Console    python_dict:${python_dict}
    @{keys}=    Get Dictionary Keys    ${python_dict}
    &{robot_dict} =    Create Dictionary    &{EMPTY}
    : FOR    ${key}    IN    @{keys}
    \    Log    key:${key}
    \    ${value}=    Get From Dictionary    ${python_dict}    ${key}
    \    Log    value:${value}
    \    Set To Dictionary    ${robot_dict}    ${key}=${value}
    \    Log    robot_dict:&{robot_dict}
    Log    robot_dict:&{robot_dict}
    Set Global Variable    &{${var_name}}    &{robot_dict}
    Log To Console    DIC:&{${var_name}}
